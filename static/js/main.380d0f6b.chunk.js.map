{"version":3,"sources":["components/Terminal.js","App.js","serviceWorker.js","index.js"],"names":["Terminal","messages","useState","input","setInput","lines","setLines","scrollRef","useRef","submit","message","l","flexRow","parseLink","text","test","matches","exec","className","href","useEffect","displayLine","messageIndex","length","cursor","trim","interval","setInterval","clearInterval","setTimeout","i","current","scrollTop","scrollHeight","ref","map","key","onKeyDown","e","stopPropagation","onChange","currentTarget","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"+LAEe,SAASA,EAAT,GAAsC,IAAD,IAAjBC,gBAAiB,MAAN,GAAM,IACxBC,mBAAS,IADe,mBAC3CC,EAD2C,KACpCC,EADoC,OAExBF,mBAAS,IAFe,mBAE3CG,EAF2C,KAEpCC,EAFoC,KAM5CC,EAAYC,mBAElB,SAASC,EAAOC,GACdJ,GAAS,SAACK,GAAD,4BAAWA,GAAX,CAAcD,OACvBN,EAAS,IAkCX,IAAMQ,EAAU,6BAuBhB,SAASC,EAAUC,GACjB,IAAK,mBAAmBC,KAAKD,GAC3B,OAAOA,EAGT,IAAME,EAAU,2BAA2BC,KAAKH,GAEhD,OACE,8BACGE,EAAQ,GACT,uBAAGE,UAAU,sBAAsBC,KAAMH,EAAQ,IAC9CA,EAAQ,IAEVA,EAAQ,IAKf,OA5BAI,qBAAU,YA5CV,SAASC,IAA+B,IAAnBC,EAAkB,uDAAH,EAElC,GAAIA,IAAiBrB,EAASsB,OAA9B,CAIA,IAAIC,EAAS,EACPd,EAAUT,EAASqB,GAEK,KAA1BZ,EAAQe,OAAOF,QACjBd,EAAOC,GAIT,IAAMgB,EAAWC,aAAY,WAE3B,GAAIH,IAAWd,EAAQa,OAMrB,OALAK,cAAcF,GACdjB,EAAOC,QACPmB,YAAW,WACTR,EAAYC,EAAe,KAC1B,KAKLlB,GAAS,SAAC0B,GAAD,OAAOA,EAAIpB,EAAQc,MAC5BA,GAAU,IACT,KAkBHH,CAAY,KACX,IAGHD,qBAAU,WACRb,EAAUwB,QAAQC,UAAYzB,EAAUwB,QAAQE,eAC/C,CAAC5B,IAqBF,yBAAKa,UAAU,cACb,yBAAKA,UAAS,UAAKN,EAAL,aACZ,yBAAKM,UAAU,sBACf,yBAAKA,UAAU,yBACf,yBAAKA,UAAU,yBAGjB,yBAAKA,UAAU,WAAWgB,IAAK3B,GAC5BF,GACCA,EAAM8B,KAAI,SAACxB,GAAD,OACR,yBAAKyB,IAAKzB,EAAGO,UAAS,UAAKN,EAAL,SACpB,yBAAKM,UAAU,6BA7Fd,MA8FD,yBAAKA,UAAU,YAAYL,EAAUF,QAG3C,yBAAKO,UAAWN,GACd,yBAAKM,UAAU,6BAlGV,MAmGL,8BACEA,UAAU,iBACVmB,UA3DV,SAAwBC,GACR,UAAVA,EAAEF,MACJE,EAAEC,kBACF9B,EAAON,KAyDDqC,SArDV,SAAqBF,GACnBlC,EAASkC,EAAEG,cAAcC,QAqDjBA,MAAO7B,EAAUV,QC7EdwC,MA7Bf,WAsBE,OACE,yBAAKzB,UAAU,OACb,kBAAClB,EAAD,CAAUC,SAvBU,CACtB,4BACA,oDACA,wFACA,iDACA,6CACA,4DACA,qCACA,2GACA,IACA,wDACA,uEACA,8CACA,IACA,6FACA,+FAEA,qEACA,yCCVgB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAMnD,a","file":"static/js/main.380d0f6b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nexport default function Terminal({ messages = [] }) {\n  const [input, setInput] = useState(\"\");\n  const [lines, setLines] = useState([]);\n\n  const base = \" $\";\n\n  const scrollRef = useRef();\n\n  function submit(message) {\n    setLines((l) => [...l, message]);\n    setInput(\"\");\n  }\n\n  function displayLine(messageIndex = 0) {\n    // if there are no more messages to print return\n    if (messageIndex === messages.length) {\n      return;\n    }\n\n    let cursor = 0;\n    const message = messages[messageIndex];\n\n    if (message.trim().length === \"\") {\n      submit(message);\n    }\n\n    // print one character per 50ms to look like typing\n    const interval = setInterval(() => {\n      // if we're at the end of the message, stop the interval and press enter\n      if (cursor === message.length) {\n        clearInterval(interval);\n        submit(message);\n        setTimeout(() => {\n          displayLine(messageIndex + 1);\n        }, 1000);\n        return;\n      }\n\n      // update input as if we were typing in the input\n      setInput((i) => i + message[cursor]);\n      cursor += 1;\n    }, 40);\n  }\n\n  const flexRow = \"flex flex-row align-center\";\n\n  function handleKeyPress(e) {\n    if (e.key === \"Enter\") {\n      e.stopPropagation();\n      submit(input);\n    }\n  }\n\n  function handleEntry(e) {\n    setInput(e.currentTarget.value);\n  }\n\n  useEffect(() => {\n    // kick off entering text\n    displayLine(0);\n  }, []);\n\n  // scroll to bottom on add line\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n  }, [lines]);\n\n  function parseLink(text) {\n    if (!/\\[(.+)\\]\\((.+)\\)/.test(text)) {\n      return text;\n    }\n\n    const matches = /(.*)\\[(.+)\\]\\((.+)\\)(.*)/.exec(text);\n\n    return (\n      <span>\n        {matches[1]}\n        <a className=\"app-text input blue\" href={matches[3]}>\n          {matches[2]}\n        </a>\n        {matches[4]}\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"app-chrome\">\n      <div className={`${flexRow} app-bar`}>\n        <div className=\"traffic-light red\" />\n        <div className=\"traffic-light yellow\" />\n        <div className=\"traffic-light green\" />\n      </div>\n\n      <div className=\"app-body\" ref={scrollRef}>\n        {lines &&\n          lines.map((l) => (\n            <div key={l} className={`${flexRow} mb2`}>\n              <div className=\"app-text b theme-blue mr2\">{base}</div>\n              <div className=\"app-text\">{parseLink(l)}</div>\n            </div>\n          ))}\n        <div className={flexRow}>\n          <div className=\"app-text b theme-blue mr2\">{base}</div>\n          <textarea\n            className=\"app-text input\"\n            onKeyDown={handleKeyPress}\n            onChange={handleEntry}\n            value={parseLink(input)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Terminal from \"./components/Terminal\";\n\nfunction App() {\n  const welcomeMessages = [\n    \"Hi there! My name is Dan.\",\n    \"I'm a fullstack web developer that loves React.js\",\n    \"I care too much about cross-platform applications and building a decentralized future\",\n    \"but for now I'm just obsessed with Javascript.\",\n    \"I've built software for a parking company,\",\n    \"a gas station chain, a pharmaceutical technology company,\",\n    \"my university, private individuals\",\n    \"and now I'm teaching others in my free-time at [Trilogy Education Services](https://www.trilogyed.com/).\",\n    \" \",\n    \"I'm also on the hunt for a new full-time career move,\",\n    \"feel free to checkout [my portfolio](https://actuallydan.github.io),\",\n    \"or send me an email at dankral01@gmail.com!\",\n    \" \",\n    \"ðŸ”­ Iâ€™m currently building [athar.es](https://github.com/atharesinc/athares)\",\n    \"ðŸ’¬ Ask me about React, GraphQL, economics, and completely hypothetical governments\",\n    // `ðŸ‘¯ Iâ€™m looking to collaborate on: your next project?`,\n    \"ðŸ“« How to reach me: How to reach me: dankral01@gmail.com\",\n    \"ðŸ˜„ Pronouns: he/him/his\",\n  ];\n\n  return (\n    <div className=\"App\">\n      <Terminal messages={welcomeMessages} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"tachyons\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}