{"version":3,"sources":["components/Window.js","components/Terminal.js","App.js","serviceWorker.js","index.js"],"names":["Terminal","children","style","title","className","messages","useState","input","setInput","lines","setLines","scrollRef","useRef","inputRef","submit","message","l","displayLine","useCallback","messageIndex","length","cursor","trim","interval","setInterval","clearInterval","setTimeout","i","current","focus","flexRow","parseLink","text","test","matches","exec","href","useEffect","scrollTop","scrollHeight","ref","map","key","onKeyDown","e","stopPropagation","onChange","currentTarget","value","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d7ced3a4.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Terminal({ children, style = {}, title = \"\" }) {\n  return (\n    <div className=\"app-chrome\" style={style}>\n      <div className={`flex flex-row items-center justify-between app-bar`}>\n        <div className={`flex flex-row items-center`}>\n          <div className=\"traffic-light red\" />\n          <div className=\"traffic-light yellow\" />\n          <div className=\"traffic-light green\" />\n        </div>\n        <div className=\"theme-blue\">{title}</div>\n        <div>&nbsp;</div>\n      </div>\n\n      {children}\n    </div>\n  );\n}\n","import React, { useEffect, useState, useRef, useCallback } from \"react\";\n\nexport default function Terminal({ messages = [] }) {\n  const [input, setInput] = useState(\"\");\n  const [lines, setLines] = useState([]);\n\n  const base = \" $\";\n\n  const scrollRef = useRef();\n  const inputRef = useRef();\n\n  function submit(message) {\n    setLines((l) => [...l, message]);\n    setInput(\"\");\n  }\n\n  const displayLine = useCallback(\n    (messageIndex = 0) => {\n      // if there are no more messages to print return\n      if (messageIndex === messages.length) {\n        inputRef.current.focus();\n        return;\n      }\n\n      let cursor = 0;\n      const message = messages[messageIndex];\n\n      if (message.trim().length === \"\") {\n        submit(message);\n      }\n\n      // print one character per 50ms to look like typing\n      const interval = setInterval(() => {\n        // if we're at the end of the message, stop the interval and press enter\n        if (cursor === message.length) {\n          clearInterval(interval);\n          submit(message);\n          setTimeout(() => {\n            displayLine(messageIndex + 1);\n          }, 1000);\n          return;\n        }\n\n        // update input as if we were typing in the input\n        setInput((i) => i + message[cursor]);\n        cursor += 1;\n      }, 40);\n    },\n    [messages]\n  );\n\n  const flexRow = \"flex flex-row align-center\";\n\n  function handleKeyPress(e) {\n    if (e.key === \"Enter\") {\n      e.stopPropagation();\n      submit(input);\n    }\n  }\n\n  function handleEntry(e) {\n    setInput(e.currentTarget.value);\n  }\n\n  useEffect(() => {\n    // kick off entering text\n    displayLine(0);\n  }, [displayLine]);\n\n  // scroll to bottom on add line\n  useEffect(() => {\n    scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n  }, [lines]);\n\n  function parseLink(text) {\n    if (!/\\[(.+)\\]\\((.+)\\)/.test(text)) {\n      return text;\n    }\n\n    const matches = /(.*)\\[(.+)\\]\\((.+)\\)(.*)/.exec(text);\n\n    return (\n      <span>\n        {matches[1]}\n        <a className=\"app-text input blue\" href={matches[3]}>\n          {matches[2]}\n        </a>\n        {matches[4]}\n      </span>\n    );\n  }\n  return (\n    <div className=\"app-body\" ref={scrollRef}>\n      {lines &&\n        lines.map((l, i) => (\n          <div key={l + i} className={`${flexRow} mb2`}>\n            <div className=\"app-text b theme-blue mr2\">{base}</div>\n            <div className=\"app-text\">{parseLink(l)}</div>\n          </div>\n        ))}\n      <div className={flexRow}>\n        <div className=\"app-text b theme-blue mr2\">{base}</div>\n        <textarea\n          className=\"app-text input\"\n          onKeyDown={handleKeyPress}\n          onChange={handleEntry}\n          value={parseLink(input)}\n          ref={inputRef}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Window from \"./components/Window\";\nimport Terminal from \"./components/Terminal\";\n// import Slider from \"react-slick\";\n\nfunction App() {\n  const welcomeMessages = [\n    \"Hi there! My name is Dan.\",\n    \"I'm a fullstack web developer that loves React.js\",\n    \"I care too much about cross-platform applications and building a decentralized future\",\n    \"but for now I'm just obsessed with Javascript.\",\n    \"I've built software for a parking company,\",\n    \"a gas station chain, a pharmaceutical technology company,\",\n    \"my university, private individuals\",\n    \"and now I'm teaching others in my free-time at [Trilogy Education Services](https://www.trilogyed.com/).\",\n    \" \",\n    \"I'm also on the hunt for a new full-time career move,\",\n    \"feel free to checkout [my portfolio](https://actuallydan.github.io),\",\n    \"or send me an email at dankral01@gmail.com!\",\n    \" \",\n    \"ðŸ”­ Iâ€™m currently building [athar.es](https://github.com/atharesinc/athares)\",\n    \"ðŸ’¬ Ask me about React, GraphQL, economics, and completely hypothetical governments\",\n    // `ðŸ‘¯ Iâ€™m looking to collaborate on: your next project?`,\n    \"ðŸ“« How to reach me: dankral01@gmail.com\",\n    \"ðŸ˜„ Pronouns: he/him/his\",\n  ];\n\n  // const projects = [\n  //   {\n  //     name: \"athar.es\",\n  //     href: \"https://athar.es\",\n  //     img: \"./images/athares-1.png\",\n  //   },\n  //   {\n  //     name: \"tadu.herokuapp.com\",\n  //     href: \"https://tadu.herokuapp.com\",\n  //     img: \"./images/tadu-2.png\",\n  //   },\n  //   {\n  //     name: \"bradysgolfcarts.com\",\n  //     href: \"https://bradysgolfcarts.com\",\n  //     img: \"./images/brady-carts.png\",\n  //   },\n  // ];\n  // const settings = {\n  //   dots: true,\n  //   infinite: true,\n  //   speed: 500,\n  //   slidesToShow: 1,\n  //   lazyLoad: \"progressive\",\n  //   className: \"w-90 mt4 pa4\",\n  // };\n\n  return (\n    <div className=\"App\">\n      <Window title={\"hello.txt\"}>\n        <Terminal messages={welcomeMessages} />\n      </Window>\n\n      {/* <div className=\"w-100 mt4 flex items-center justify-center\">\n        <Slider {...settings}>\n          {projects.map((p) => (\n            <Window key={p.name} title={p.name}>\n              <img src={p.img} />\n            </Window>\n          ))}\n        </Slider>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"tachyons\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}